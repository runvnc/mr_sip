<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Call Recordings</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        h1 {
            color: white;
            margin-bottom: 30px;
            text-align: center;
            font-size: 2.5em;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
        }
        
        .calls-grid {
            display: grid;
            gap: 20px;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        }
        
        .call-card {
            background: white;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .call-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 12px rgba(0,0,0,0.15);
        }
        
        .call-header {
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .agent-name {
            font-size: 1.2em;
            font-weight: 600;
            color: #667eea;
            margin-bottom: 5px;
        }
        
        .phone-number {
            font-size: 1.1em;
            color: #333;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .call-time {
            color: #666;
            font-size: 0.9em;
        }
        
        .log-id {
            color: #999;
            font-size: 0.85em;
            font-family: monospace;
            margin-top: 5px;
        }
        
        .audio-player {
            width: 100%;
            margin: 15px 0;
        }
        
        .actions {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-top: 15px;
        }
        
        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 6px;
            font-size: 0.9em;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            text-decoration: none;
            text-align: center;
            display: inline-block;
        }
        
        .btn-primary {
            background: #667eea;
            color: white;
        }
        
        .btn-primary:hover {
            background: #5568d3;
        }
        
        .btn-secondary {
            background: #f0f0f0;
            color: #333;
        }
        
        .btn-secondary:hover {
            background: #e0e0e0;
        }
        
        .btn-success {
            background: #48bb78;
            color: white;
        }
        
        .btn-success:hover {
            background: #38a169;
        }
        
        .no-calls {
            text-align: center;
            color: white;
            font-size: 1.2em;
            margin-top: 50px;
        }
        
        .transcript-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.7);
            z-index: 1000;
            align-items: center;
            justify-content: center;
        }
        
        .transcript-modal.active {
            display: flex;
        }
        
        .transcript-content {
            background: white;
            border-radius: 12px;
            padding: 30px;
            max-width: 800px;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
        }
        
        .transcript-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .transcript-header h2 {
            color: #667eea;
            margin: 0;
        }
        
        .close-btn {
            background: #f0f0f0;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            cursor: pointer;
            font-size: 1.2em;
            line-height: 1;
        }
        
        .close-btn:hover {
            background: #e0e0e0;
        }
        
        .transcript-text {
            line-height: 1.6;
            color: #333;
            font-size: 0.95em;
        }
        
        .transcript-line {
            margin-bottom: 12px;
            padding: 8px 12px;
            border-radius: 6px;
            background: #f8f9fa;
        }
        
        .transcript-line.ai {
            background: #e3f2fd;
            border-left: 3px solid #667eea;
        }
        
        .transcript-line.human {
            background: #f1f8e9;
            border-left: 3px solid #48bb78;
        }
        
        .transcript-line.dtmf {
            background: #fff3e0;
            border-left: 3px solid #ff9800;
        }
        
        .transcript-role {
            font-weight: 600;
            margin-bottom: 4px;
            font-size: 0.85em;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .transcript-role.ai { color: #667eea; }
        .transcript-role.human { color: #48bb78; }
        .transcript-role.dtmf { color: #ff9800; }
        
        .transcript-info {
            margin-bottom: 15px;
            color: #666;
        }
        
        @media (max-width: 768px) {
            .calls-grid {
                grid-template-columns: 1fr;
            }
            
            h1 {
                font-size: 2em;
            }
            
            .transcript-content {
                margin: 20px;
                max-width: calc(100% - 40px);
            }
        }
        
        .loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ“ž Call Recordings</h1>
        
        {% if calls %}
            <div class="calls-grid">
                {% for call in calls %}
                    <div class="call-card">
                        <div class="call-header">
                            <div class="agent-name">{{ call.agent_name }}</div>
                            <div class="phone-number">ðŸ“± {{ call.phone_number }}</div>
                            <div class="call-time">{{ call.time }}</div>
                            <div class="log-id">{{ call.log_id }}</div>
                        </div>
                        
                        <audio class="audio-player" controls preload="metadata">
                            <source src="/calls/audio/{{ call.log_id }}" type="audio/wav">
                            Your browser does not support the audio element.
                        </audio>
                        
                        <div class="actions">
                            {% if call.session_path %}
                                <a href="{{ call.session_path }}" target="_blank" class="btn btn-primary">
                                    View Session
                                </a>
                            {% endif %}
                            <button class="btn btn-success" onclick="showTranscript('{{ call.log_id }}')">Show Transcript</button>
                            <button class="btn btn-success" onclick="showAudioTranscript('{{ call.log_id }}')">Audio Transcript</button>
                            <a href="/calls/audio/{{ call.log_id }}" download="{{ call.filename }}" class="btn btn-secondary">
                                Download
                            </a>
                        </div>
                    </div>
                {% endfor %}
            </div>
        {% else %}
            <div class="no-calls">
                No call recordings found.
            </div>
        {% endif %}
    </div>
    
    <div id="transcriptModal" class="transcript-modal">
        <div class="transcript-content">
            <div class="transcript-header">
                <h2>Call Transcript</h2>
                <button class="close-btn" onclick="closeTranscript()">Ã—</button>
            </div>
            <div id="transcriptInfo" class="transcript-info"></div>
            <div id="transcriptText" class="transcript-text"></div>
        </div>
    </div>
    
    <script>
        async function showTranscript(logId) {
            const modal = document.getElementById('transcriptModal');
            const infoDiv = document.getElementById('transcriptInfo');
            const textDiv = document.getElementById('transcriptText');
            
            textDiv.textContent = 'Loading transcript...';
            infoDiv.textContent = '';
            modal.classList.add('active');
            
            try {
                const response = await fetch(`/calls/transcript/${logId}`);
                const data = await response.json();
                
                if (data.success) {
                    infoDiv.innerHTML = `<strong>Agent:</strong> ${data.agent_name} | <strong>Phone:</strong> ${data.phone_number}`;
                    
                    // Format transcript with styled lines
                    const transcript = data.transcript || 'No transcript available.';
                    const lines = transcript.split('\n\n').filter(line => line.trim());
                    
                    textDiv.innerHTML = '';
                    lines.forEach(line => {
                        const div = document.createElement('div');
                        const isAI = line.startsWith('AI:');
                        const isHuman = line.startsWith('Human:');
                        const isDTMF = line.startsWith('DTMF:');
                        
                        div.className = `transcript-line ${isAI ? 'ai' : isHuman ? 'human' : isDTMF ? 'dtmf' : ''}`;
                        const role = isAI ? 'AI' : isHuman ? 'Human' : isDTMF ? 'DTMF' : '';
                        const text = line.replace(/^(AI:|Human:|DTMF:)\s*/, '');
                        
                        div.innerHTML = role ? `<div class="transcript-role ${role.toLowerCase()}">${role}</div><div>${text}</div>` : text;
                        textDiv.appendChild(div);
                    });
                } else {
                    textDiv.textContent = 'Error loading transcript: ' + (data.error || 'Unknown error');
                }
            } catch (error) {
                textDiv.textContent = 'Error loading transcript: ' + error.message;
            }
        }
        
        async function showAudioTranscript(logId) {
            const modal = document.getElementById('transcriptModal');
            const infoDiv = document.getElementById('transcriptInfo');
            const textDiv = document.getElementById('transcriptText');
            
            textDiv.innerHTML = '<div class="loading-spinner"></div> Transcribing audio with Whisper... This may take a minute.';
            infoDiv.textContent = '';
            modal.classList.add('active');
            
            try {
                const response = await fetch(`/calls/audio_transcript/${logId}`);
                const data = await response.json();
                
                if (data.success) {
                    infoDiv.innerHTML = `<strong>Agent:</strong> ${data.agent_name} | <strong>Phone:</strong> ${data.phone_number} | <strong>Source:</strong> Audio (Whisper)`;
                    
                    // Display as simple text since Whisper doesn't separate speakers
                    const div = document.createElement('div');
                    div.className = 'transcript-line';
                    div.innerHTML = `<div class="transcript-role">Audio Transcript</div><div>${data.transcript || 'No transcript available.'}</div>`;
                    textDiv.innerHTML = '';
                    textDiv.appendChild(div);
                } else {
                    textDiv.textContent = 'Error loading audio transcript: ' + (data.error || 'Unknown error');
                }
            } catch (error) {
                textDiv.textContent = 'Error loading audio transcript: ' + error.message;
            }
        }
        
        function closeTranscript() {
            document.getElementById('transcriptModal').classList.remove('active');
        }
        
        // Close modal when clicking outside
        document.getElementById('transcriptModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeTranscript();
            }
        });
    </script>
</body>
</html>
